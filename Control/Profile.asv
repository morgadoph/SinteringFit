classdef Profile <handle
    %Estrutura que guarda todas as informações e opções utilizadas na
    %análise de um dado conjunto de dados
    
    properties
        Id                                                                 %Identificação
        Name
        Config                                                             %Estrutura que guarda as configurações e opções selecionadas pelo usuário
        ArrayData                                                          %Array de estruturas que guarda os dados experimentais e os calculados
        nCurves                                                            %Número de curvas analisadas
        GraphControl                                                       %Contém as opções dos gráficos
        IdColor                                                            %Grava a quantidade de curvas/cores no profile
        CurvesNameList
        GraphFlag
        GraphChoose
        NGraph
        SelectedGraph
        ShrinkageFlag
        DensityFlag
        UncertaintyFlag
        Arrhenius
        ArrheniusFlag
        MSCFlag
        MSC
        MSC2
        UncTime
        ListBox6Choice
        Popup8Choice
        Popup3Choice
        AnalysisFlag
        
    end
    
    methods
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%Construtor%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function obj = Profile(Id, nCurves)
            if nargin > 0
                obj.Id = Id;
                obj.nCurves = nCurves;
            end
            
            for i=1:38
                obj.GraphFlag(i,1)=0;
            end
            for i=1:4
                obj.GraphChoose{i}=[];
            end
            obj.ListBox6Choice=1;
            obj.Popup8Choice=1;
            obj.Popup3Choice=1;
            obj.SelectedGraph=1;
            obj.NGraph=1;
            obj.ShrinkageFlag=0;
            obj.UncertaintyFlag=0;
            obj.Arrhenius=ArrheniusClass;
            obj.DensityFlag=0;
            obj.ArrheniusFlag=0;
            obj.MSCFlag=0;
            obj.MSC=MSCClass;
            obj.MSC2=MSCClass;
            obj.AnalysisFlag=0;
            
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%Funções de cálculo chamadas pela interface%%%%%%%%%%%%
        function Obj= ApplyShrinkage (Obj)
            for i=1:Obj.nCurves
               Obj.Calculate_Shrinkage;
               Obj.ShrinkageFlag=1;
            end
        end

        function Obj= ApplyCalculations(Obj)
            
            %%%%%%%Calcula as curvas de derivada da retração linear%%%%%%%%
            if Obj.Config.ShrinkageDerivateOk==1
                for i=1:Obj.nCurves
                    %Calcula as derivadas
                    Obj.ArrayData(i).Shrinkage.CalcDerivatet;
                    Obj.ArrayData(i).Shrinkage.CalcDerivateT;
                    
                    %Iguala as curvas suavizadas às derivadas quando executado pela primeira vez
                    Obj.ArrayData(i).Shrinkage.SmoothDerivatet=Obj.ArrayData(i).Shrinkage.Derivatet;
                    Obj.ArrayData(i).Shrinkage.SmoothDerivateT=Obj.ArrayData(i).Shrinkage.DerivateT;
                    
                end
            end
                    
            %Calcula as curvas de densidade
            if Obj.Config.DensitiesOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Densities.Calc(Obj.ArrayData(i).Shrinkage,Obj.Config);
                end
                Obj.DensityFlag=1;
            end
            
            %Calcula as curvas de derivada da densidade
             if Obj.Config.DensitiesDerivateOk==1
                 for i=1:Obj.nCurves
                     
                     %Calcula as derivadas
                     Obj.ArrayData(i).Densities.CalcDerivatet;
                     Obj.ArrayData(i).Densities.CalcDerivateT;
                     
                     %Iguala as curvas suavizadas às derivadas quando executado pela primeira vez
                     Obj.ArrayData(i).Densities.SmoothDerivatet=Obj.ArrayData(i).Densities.Derivatet;
                     Obj.ArrayData(i).Densities.SmoothDerivateT=Obj.ArrayData(i).Densities.DerivateT;
                     
                 end
             end
             
             %Calcula a densificação
             if Obj.Config.DensificationOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Calc_Densification;
                end
             end
             
             %Calcula a derivada da densificação
             if Obj.Config.DensificationDerivateOk==1
                 for i=1:Obj.nCurves
                     %Calcula as derivadas da curva
                     Obj.ArrayData(i).Densification.CalcDerivatet;
                     Obj.ArrayData(i).Densification.CalcDerivateT;
                     
                     %Iguala as curvas suavizadas as derivadas quando executadas pela primeira vez
                     Obj.ArrayData(i).Densification.SmoothDerivatet=Obj.ArrayData(i).Densification.Derivatet;
                     Obj.ArrayData(i).Densification.SmoothDerivateT=Obj.ArrayData(i).Densification.DerivateT;
                     
                     
                 end
             end
             
            %Calcula as curvas de retração linear instantânea e suas derivadas
            if Obj.Config.InstShrinkageOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Calc_Linst;
                end
            end
            
            %Calcula as curvas de derivada da retração linear instantânea
            if Obj.Config.InstShrinkageDerivateOk==1
                for i=1:Obj.nCurves
                    %Calcula as derivadas da curva
                    Obj.ArrayData(i).InstShrinkage.CalcDerivatet;
                    Obj.ArrayData(i).InstShrinkage.CalcDerivateT;
                    
                    %Iguala as curvas suavizadas as derivadas quando executadas pela primeira vez
                    Obj.ArrayData(i).InstShrinkage.SmoothDerivatet=Obj.ArrayData(i).InstShrinkage.Derivatet;
                    Obj.ArrayData(i).InstShrinkage.SmoothDerivateT=Obj.ArrayData(i).InstShrinkage.DerivateT;
                    
                end
            end
               
        end

        function Obj=ApplyUncertainty (Obj)
         
            Obj.UncertaintyFlag=0;
            %Calcula as matrizes de covariância dos dados de retração linear
            for i=1:Obj.nCurves
                Obj.ArrayData(i).Shrinkage.CalcUnc(Obj.ArrayData(i),Obj.Config);
            end
            
            %Calcula as matrizes de covariância das derivadas da retração linear
            if Obj.Config.ShrinkageDerivateOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Shrinkage.CalcDerivateUnct;
                    Obj.ArrayData(i).Shrinkage.CalcDerivateUncT;
                end
            end
                    
            %Calcula as matrizes de covariância dos dados de densidade
            if Obj.Config.DensitiesOk ==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Densities.CalcUnc(Obj.ArrayData(i).Shrinkage,Obj.Config);
                end
            end
            
            %Calcula as matrizes de covariância das derivadas da densidade
            if Obj.Config.DensitiesDerivateOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Densities.CalcDerivateUnct;
                    Obj.ArrayData(i).Densities.CalcDerivateUncT;
                end
            end
            
            %Calcula as matrizes de covariância dos dados de densificação
            if Obj.Config.DensificationOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).CalcUnc_Densification;
                end
            end

            %Calcula as matrizes de covariância das derivadas da densidade
            if Obj.Config.DensificationDerivateOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).Densification.CalcDerivateUnct;
                    Obj.ArrayData(i).Densification.CalcDerivateUncT;
                end
            end
            
            %Calcula as matrizes de covariância dos dados de retração linear instantânea
            if Obj.Config.InstShrinkageOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).CalcUnc_Linst;
                end
            end

            %Calcula as matrizes de covariância das derivadas da retração linear instantânea
            if Obj.Config.InstShrinkageDerivateOk==1
                for i=1:Obj.nCurves
                    Obj.ArrayData(i).InstShrinkage.CalcDerivateUnct;
                    Obj.ArrayData(i).InstShrinkage.CalcDerivateUncT;
                end
            end
            
            Obj.UncertaintyFlag=1;
            
        end

                        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%Funções matemáticas que precisam de todo o ArrayData%%%%%%%%%%
        
        function Obj= Calculate_Shrinkage (Obj)

                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BLOCO 1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%Entrada de dados, criação de variáveis obrigatórias e variáveis iniciais%


                %Bloco que carrega arquivo de dados necessários 
                ncurvas= Obj.nCurves;
                Arquivo=cell(ncurvas,1);
                l0=zeros(ncurvas,1);
                l0cor=zeros(ncurvas,1);
                Acor=cell(ncurvas,1);                                                      %Variável que guardará curvas corrigidas
                Ndados=cell(ncurvas,1);                                                    %Guarda número de dados por coluna 
                for i=1:ncurvas
                    Arquivo{i}=Obj.ArrayData(i).File;                                      %Carrega arquivo de dados
                    l0(i,1)=Obj.ArrayData(i).Lo;                                             %Carrega os comprimentos iniciais
                    Ndados{i} =size(Arquivo{i});                                           %Determina o tamanho de cada arquivo de dados
                end
                
                %Bloco que carrega as informações com relação a correção de To
                T0correction=Obj.Config.ToOk;
                if Obj.Config.ToOk==1
                    T0=Obj.Config.ToValue;
                end
                
                %Bloco que carrega as informações com relação a correção de Lo
                if Obj.Config.LoOk==1
                    Tinicio=[Obj.Config.ToLoValue Obj.Config.TfLoValue];
                    if Obj.Config.LoMethod ==0
                        L0correction1=1;
                        L0correction2=0;
                    else
                        L0correction1=0;
                        L0correction2=1;
                        curvaref=Obj.Config.ReferenceLo;
                    end
                else
                    L0correction1=0;
                    L0correction2=0;
                end
                
                %Bloco que verifica se a correção da expansão do terminal está selecionada
                Exptermterminal =Obj.Config.PushRodOk;
                if Obj.Config.PushRodOk==1
                   terminal=Obj.Config.PushRodFile;                                             %Carrega arquivo com dados do arquivo de correção da exp. term. do terminal (T cor cet)
                end
                
                %Bloco que verifica se a correção da expansão térmica da amostra está selecionada
                Exptermcorrection =Obj.Config.ExpThermOk;
                if Obj.Config.ExpThermOk==1
                    cet_data=Obj.Config.ExpThermFile;                                                  %Carrega arquivo com dados do coef. de exp. term. inst. (T DL/L0 cet)
                end
                
                %Bloco que verifica se o método padrão está selecionado
                if Obj.Config.PushRodOk ==1 && Obj.Config.ExpThermOk==1
                    MetRafael = Obj.Config.DlMethod;
                else
                    MetRafael = 0;
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BLOCO 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%Correção de L0 e de T0%%%%%%%%%%%%%%%%%%%%%%%%%%%%


                %Bloco que define método utilizado na correção de L0 (método está ativado se igual a (1) ou desativado se igual a (0) )
                %Todos os métodos desprezam a correlação inserida entre os dados de deslocamento utilizados e L0

                %Bloco que executa a correção de T0 caso ativada 
                if T0correction==1
                    for i=1:ncurvas
                        [Acor{i},Ndados{i},l0(i)] = T0cor(Arquivo{i},T0,l0(i));
                    end
                else
                    Acor=Arquivo;
                end

                if L0correction1==1
                    delta=zeros(ncurvas,1);                                                %Variável que guardará valores corrigidos de L0
                    for i=1:ncurvas
                        [Acor{i}, l0cor(i),delta(i)] = Correcao_L01 (Acor{i}, l0(i,1), Tinicio);
                    end
                end

                if L0correction2==1
                    [Acor, l0cor,~] = Correcao_L02 (Acor, l0(:,1), Tinicio, curvaref);
                end
                
                for i=1:ncurvas
                    Obj.ArrayData(i).File=Acor{i};                                      %Carrega arquivo de dados
                end
    
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BLOCO 3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%Determinação do coef. de exp. term. inst. para cada dado de cada curva%%
                %%%%%%%%%e do arquivo de correção devido à expansão do terminal%%%%%%%%%%%%


                %Bloco que determina os arquivos de correção a serem utilizados para expansão térmica das amostras
                if Exptermcorrection==1
                    cet=cell(ncurvas,1);                                                   %Variável que guardará correção inst. para cada temp. de cada temperatura
                    [cet_data] = interpolacao (cet_data);                                  %Função que organiza dados e interpola entre as temperaturas de 1 e 1600 graus
                    for i=1:ncurvas
                        [cet{i}]=Determinacor(Acor{i},cet_data);                           %Determina arquivo de correção utilizado para expansão térmica da amostra
                    end
                end

                %Bloco que determina os arquivos de correção a serem utilizados para expansão do terminal
                if Exptermterminal==1
                    cetterminal=cell(ncurvas,1);                                           %variável que guardará arquivo de correção da exp. term. do terminal para cada curva
                    [terminal] = interpolacao (terminal);                                  %Função que organiza dados e interpola entre as temperaturas de 1 e 1600 graus
                    for i=1:ncurvas
                        [cetterminal{i}]=Determinacor(Acor{i},terminal);                   %Determina arquivo de correção a ser utilizado para expansão do terminal
                    end
                end


                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BLOCO 4%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%Calcula retração linear corrigida%%%%%%%%%%%%%%%%%%%%


                %Bloco que calcula a retração linear diretamente dos dados
                if Exptermcorrection==0 && Exptermterminal==0
                    for i=1:ncurvas
                        Acor{i}(:,3)=Acor{i}(:,3)/l0(i);
                    end
                end

                %Bloco que calcula a retração linear considerando apenas a expansão térmica do terminal
                if Exptermcorrection==0 && Exptermterminal==1
                    for i=1:ncurvas
                        Acor{i}(:,3)=(Acor{i}(:,3)/l0(i))+cetterminal{i}(:,1);
                    end
                end

                %Bloco que calcula a retração linear considerando apenas a expansão térmica das amostras
                if Exptermcorrection==1 && Exptermterminal==0
                    for i=1:ncurvas
                        Acor{i}(:,3)=(Acor{i}(:,3)/l0(i))-cet{i}(:,1);
                    end
                end

                %Bloco que calcula a retração linear das amostras considerando a expansão térmica das amostras e do terminal
                if Exptermcorrection==1 && Exptermterminal==1
                    for i=1:ncurvas
                        Acor{i}(:,3)=(Acor{i}(:,3)/l0(i))+cetterminal{i}(:,1)-cet{i}(:,1);     %Calcula a retração do método comum (soma dos termos)
                    end
                    if MetRafael==1
                        A=cell(ncurvas,1);
                        for i=1:ncurvas
                            A{i}=(ones(Ndados{i}(1,1),1)-cetterminal{i}(:,1)+cet{i}(:,1));
                            Acor{i}(:,3)=Acor{i}(:,3)./A{i};                                   %Calcula a retração pelo método que desenvolvi
                        end
                    end
                end


                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BLOCO 4%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%Saída de dados%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                for i=1:ncurvas
                    Obj.ArrayData(i).Shrinkage.Curve=Acor{i};
                    Obj.ArrayData(i).Lo=l0(i);
                end

                    
        end
        
        
    end
    
end

