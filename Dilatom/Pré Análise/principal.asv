
incerteza=0.00005;                                                         %Incerteza utilizada no programa... caso seja diferente mudar unidades de medida
limite=zeros(ncurvas,1);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Bloco que corrige L0 e gera matriz de covariâncias
for i=1:ncurvas
    
    %Bloco que Lê dados de cada curva para correção no loop
    a= sprintf('arquivo%d',i);                                             %Seleciona qual curva será corrigida no loop
    d=eval(a);                                                             %Utiliza a string para ler os valores da variável escrita acima
    [n_linhas, n_cols] =size(d);                                           %Determina o tamanho do arquivo de dados
    
    %Bloco que cria matriz de covariância dos dados
    V=zeros(n_linhas,n_linhas);
    for j=1:n_linhas
        for k=1:n_linhas
            if j==k
                V(j,j)=incerteza*incerteza;                                %Variância
            else
                V(j,k)=0.5*incerteza*incerteza;                            %0,5 = coef. de correlação 
            end
        end
    end
    
       
    %Verifica se correção de L0 está selecionada e executa em caso afirmativo
    if L0correction==1                     
    
        %Função que abre tela na interface e retorna a temperatura de início e
        %fim do ajuste do L0
        Laux1=L0(i,1);
        Laux2=L0(i,2);
        [acor, Vcov, Laux1, Laux2, param, chi2ajust, chi2teo, chivar] = CorrigiL0 (d, n_linhas, Laux1, Laux2, V, inicio, fim);        %L0 (Arquivo), inicio e fim (tela- usuário) foram entrados anteriormente
        L0(i,1)=Laux1;
        L0(i,2)=Laux2;
        %Função que modifica a tela mostrando o ajuste feito e parâmetros do ajuste
    else
        acor = d;
        %Bloco que constrói matriz de covariâncias de dados e L0
        m=n_linhas+1;
        Vcov=zeros(m,m);
        for j=1:n_linhas
            for k=1:n_linhas
                Vcov(j,k)=V(j,k);
            end
        end
        V(m,m)=L0(i,2)^2;
    end
    
    
    
    
    %Bloco que guarda curva corrigida acor e matriz de covariância de dados
    a= sprintf('acor%d',i);                                                %Determina qual curva corrigida será guardada
    assignin('base', a, acor);                                             %Guarda dados corrigidos na variável com string dado por a
    a= sprintf('Vcov%d',i);                                                %Determina qual matriz de covariância será salva
    assignin('base',a,Vcov);                                               %Guarda matriz de covariância dos dados e L0
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Verifica se a correção da expansão térmica dos terminais está
%selecionada e executa em caso afirmtativo (somente se expansão térmica
%da amostra não estiver selecionada)
if Exp_term ==1
    %Função que abre tela e pede arquivo com parâmetros de correção e L0std
    if Expterm_sample==0
        for i=1:ncurvas
            
            %Bloco que Lê dados de cada curva para correção no loop
            a= sprintf('acor%d',i);                                        %Seleciona qual curva será corrigida no loop
            d=eval(a);                                                     %Utiliza a string para ler os valores da variável escrita acima
            [n_linhas, n_cols] =size(d);                                   %Determina o tamanho do arquivo de dados
            [acor] = Cor_expterm_terminais (d, fatores, L0std);            %Corrigi com L estático igual L0std - introduz erros
            
            %Bloco que guarda curva corrigida acor 
            a= sprintf('acor%d',i);                                        %Determina qual curva corrigida será guardada
            assignin('base', a, acor);                                     %Guarda dados corrigidos na variável com string dado por a
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Bloco que prepara dados para cálculos posteriores
T0=zeros(ncurvas);
for i=1:ncurvas
            
    %Bloco que Lê dados de cada curva para correção no loop
    a= sprintf('acor%d',i);                                                %Seleciona qual curva será corrigida no loop
    d=eval(a);                                                             %Utiliza a string para ler os valores da variável escrita acima
    [n_linhas, n_cols] =size(d);                                           %Determina o tamanho do arquivo de dados
        
    
    %Bloco que separa curvas de aquecimento e resfriamento e guarda elas em variáveis separadas para cada curva
    [curvaaq,curvares]=separador (d, n_linhas);                            %Função que separa curvas em resfriamento e aquecimento
    b= sprintf('curvaaq%d',i);                                             %Seleciona nome da curva de aquecimento que está sendo analisada
    assignin('base', b, curvaaq);                                          %Guarda dados do aquecimento na variável adequada
    c= sprintf('curvares%d',i);                                            %Seleciona nome da curva de resfriamento que está sendo analisada
    assignin('base', c, curvares);                                         %Guarda dados do resfriamento na variável adequada
    T0(i)=acor(1,2);                                                       %Temperatura ambiente da curva i
    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Bloco quedetermina expansão térmica de cada amostra (caso selecionado)
if Exp_term ==1
    if Expterm_sample==1 
    
        %Bloco que Lê dados de cada curva para correção no loop
        a= sprintf('curvares%d',i);                                        %Seleciona qual curva de resfriamento será ajustada
        curvares=eval(a);                                                  %Utiliza a string para ler os valores da variável escrita acima
        [n_linhasres, n_cols] =size(curvares);                             %Determina o tamanho do arquivo de dados
        b= sprintf('acor%d',i);                                            %Seleciona qual curva será corrigida no loop
        dados=eval(b);                                                     %Utiliza a string para ler os valores da variável escrita acima
        [n_linhas, n_cols] =size(dados);                                   %Determina o tamanho do arquivo de dados
        c= sprintf('Vcov%d',i);                                            %Seleciona qual matriz de covariância será usada
        Vcov=eval(a);                                                      %Utiliza a string para ler os valores da variável escrita acima
        
        %Bloco que corta dados do início do resfriamento 
        [curvares,nlin, ncorte] = Cortadados (curvares, Tcorte);           %Função que corta dados durante início do resfriamento
        limite(i)=nlin;                                                    %Determina quantidade de dados de resfriamento para cada arquivo
    
    
        %Bloco que constrói matriz de covariância de dados V e prepara dados pro ajuste
        Vres=Vcov(ncorte:n_linhasres,ncorte:n_linhasres);                  %Constrói a matriz de covariância dos dados para conjunto de curvas de resfriamento
        dadosx = curvares(:,2)-T0(i)*ones(n_linhasres-ncorte);             %Separa dados independentes para o ajuste
        dadosy = curvares(:,3);                                            %Prepara dados a ajustar
    
        %Ajuste de expansão térmica total
        [param, chi2aj, chi2teo, var, graufinal, C]=MMQ_pol(dadosx, dadosy, Vres, grau, nlinhas);       %Efetua ajustes de vários graus para expansão térmica e efetua teste de hipótese 
    
        %Determinação da expansão térmica da amostra
        aux1L0=L0(i,1);
        aux2L0=L0(i,2);
        [alfasample, Vpdados]=exp_term_sample(dadosx, dadosy, fatores, L0std, aux1L0, aux2L0, param);
    
    %Bloco que corrigi dados de aquecimento - Arrumar
    for i=1:ncurvas
        a= sprintf('curvaaq%d',i);                                         %Determina qual curva está sendo corrigida
        d=eval(a);                                                         %Utiliza a string para ler os valores da variável já guardada
        [n_linhas, n_cols] =size(d);                                       %Determina o tamanho do arquivo de dados
        [dadosfim, Valfay]= Corrigi_sample (d, n_linhas, param, grau, L0, i, C, Vres, correlacao);     %Função que corrigi expansão térmica da amostra
        b= sprintf('curvacor%d',i);                                        %Determina qual curva está sendo corrigida
        assignin('base', b, [d incerteza]);                                %Salva curva corrigida na variável dado pelo string b
    end
    %Função gráfica que mostra ajuste, parâmetros do ajuste e curva corrigida
end
    
